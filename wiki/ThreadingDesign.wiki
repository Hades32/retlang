== Design Guidelines ==
Retlang was designed based upon the following threading principles for robust multithreaded code:

  * Minimize Lock Contention
  * Minimize Blocking
  * Minimize Deadlock possibilities
  * Allow for thread reuse and pooling
  * Consuming/Publishing code should be explicit and testable

== Publishing ==

Publishing to a process context is always thread safe. The publisher doesn't need to worry about locking. This allows Retlang to be easily integrated with 3rd party components that use their own threads. 

== Subscribing == 

The registration of a subscription is also thread safe. Once the subscription is in place, events will be delivered sequentially. The receiving delegate will never be executed concurrently. 

== Further Reading ==
The [http://lamp.epfl.ch/~phaller/doc/haller07actorsunify.pdf Actors that Unify Threads and Events] provides a wealth of information on message based concurrency in [http://www.scala-lang.org/ Scala]. Although Retlang is not based on Scala Actors, the designs are similar.