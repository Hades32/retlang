= Example: Receive All Events Batched Every Second =

This example batches *_all_* events being published on any process in a second.
{{{
IsMatch<object> selector = delegate { return true; };
TopicSelector<object> topicMatcher = new TopicSelector<object>(selector);
On<IList<IMessageEnvelope<object>>> messageCount = delegate(IList<IMessageEnvelope<object>> msgs)
{
  Console.WriteLine("Message Count: " + msgs.Count);
};
context.SubscribeToBatch<object>(topicMatcher, messageCount, 1000);
}}}

= Batching With Keys =

Events can also be batched using keys so that duplicates are dropped. Here is the same example, but the topic is used as a key for batching.

{{{
IsMatch<object> selector = delegate { return true; };
TopicSelector<object> topicMatcher = new TopicSelector<object>(selector);
On<IDictionary<object, IMessageEnvelope<object>>> messageCount = delegate(IDictionary<object, IMessageEnvelope<object>> msgs)
            {
                Console.WriteLine("Message Count: " + msgs.Values.Count);
            };
ResolveKey<object, object> keyResolver = delegate(IMessageHeader header, object msg){
  return header.Topic;
};
context.SubscribeToKeyedBatch<object, object>(topicMatcher, keyResolver, messageCount, 1000);

}}}

= Subscribe To Last =

The SubscribeToLast method batches events over a specified interval and then delivers the last event to the callback. During the batching interval, prior events will be dropped. A reference is kept only to the last event received.

{{{
IsMatch<object> selector = delegate { return true; };
TopicSelector<object> topicMatcher = new TopicSelector<object>(selector);
OnMessage<object>>> messageCount = delegate(IMessageHeader header, object msg)
{
  Console.WriteLine("Last Message : " + msg);
};
context.SubscribeToLast<object>(topicMatcher, messageCount, 1000);
}}}