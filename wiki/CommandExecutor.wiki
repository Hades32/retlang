Retlang gives full control over the execution of events. This allows developers to monitor the delivery and execution of all events in the system.  The base framework performs no exception handling or logging. Most implementors will probably want to add their own logging and monitoring. This just requires the implementation of a simple interface.

=== ICommandExecutor ===

{{{
namespace Retlang
{
    public interface ICommandExecutor
    {
        void ExecuteAll(Command[] toExecute);
    }
}
}}}

=== Default Implementation ===
The default implementation performs no exception handling or logging.
{{{
namespace Retlang
{
    public class CommandExecutor : ICommandExecutor
    {
        public void ExecuteAll(Command[] toExecute)
        {
            foreach (Command command in toExecute)
            {
                command();
            }
        }
    }
}
}}}

=== Custom Implementations ===
Custom implementations are passed to the process context at creation time. Most likely this is done using the ProcessContextFactory.

{{{
IProcessContextFactory factory = ...
IProcessContext context = factory.CreatePooled(new MyCommandExecutor());
}}}