== Data Transfer Objects ==

Services exchange data asynchronously using data transfer objects. This means that the objects will most likely be accessed on different threads.  Developers need to be aware of a couple considerations.

  * Immutable Objects - Probably the best option since the objects can safely be exchanged without worrying about concurrency issues.
  * Serialized objects - Objects can be serialized to bytes then transferred to the other thread. Serialization can create a lot of overhead, but is generally safe and effective.
  * Data Copy Objects - Data copy objects typically are mutable objects that are used to copy the state of a mutable domain object to another process. The object only exists to transfer the state between threads, so it is thread safe. The publishing service creates the object, copies state into the data copy object, then publishes it to other threads. The publishing service should not retain a reference and by convention the receiving service should only interpret the data and not mutate the data since there may be another thread accessing the same data.

Retlang supports xml and binary serialization. Retlang also supports exchanging objects directly without any serialization overhead. Binary Serialization is the default.

=== Default Object Transfer ===
{{{
ProcessContextFactory factory = new ProcessContextFactory();
factory.TransferEnvelopeFactory = new ObjectTransferEnvelopeFactory();  
}}}

=== Default Binary Transfer ===
{{{
ProcessContextFactory factory = new ProcessContextFactory();
factory.TransferEnvelopeFactory = new BinaryTransferEnvelopeFactory();  
}}}

=== Default Xml Transfer ===
{{{
ProcessContextFactory factory = new ProcessContextFactory();
factory.TransferEnvelopeFactory = new XmlTransferEnvelopeFactory();  
}}}

=== Per publish configuration ===
The transfer strategy can also be specified each time an object is published. This allows strategies to be mixed and matched depending on the use case and performance needs.
{{{
IProcessContext context = ... 
object topic = new object();
int messages = 1;
object replyTopic = new object();
context.Publish(new BinaryTransferEnvelope(topic, message, replyTopic));
context.Publish(new XmlTransferEnvelope(topic, message, replyTopic));
context.Publish(new ObjectTransferEnvelope(topic, message, replyTopic));

}}}