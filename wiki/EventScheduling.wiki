Events can be scheduled on a single or recurring interval.

=== Enqueue for Immediate Execution On Process Thread ===

{{{
IProcessContext context = ... resolve context
Command scheduled = delegate{
                              Console.Writeline("Hello");
                            };
context.Enqueue(scheduled);
}}}


=== Single Execution ===

{{{
IProcessContext context = ... resolve context
Command scheduled = delegate{
                              Console.Writeline("Hello");
                            };
ITimerControl timer = context.Schedule(scheduled, 100);

// the control can later be used to cancel if the event has not executed.
timer.Cancel();
}}}

=== On Interval ===

{{{
IProcessContext context = ... resolve context
Command scheduled = delegate{
                              Console.Writeline("Hello");
                            };
ITimerControl control = context.ScheduleOnInterval(scheduled, 100, 100);
// the control can be used to cancel the timer at any time.
timer.Cancel();
}}}

=== Using System.Threading.Timer ===
{{{
IProcesscontext context = ....
TimerCallback callback = delegate{context.Enqueue(delegate{Console.WriteLine("event");})};
Timer timer = new Timer(callback, null, 1000, 1000);

// give some time for events to happen
Thread.Sleep(10000);

// stop timer
timer.Dispose();
timer = null;
}}}