<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Retlang</name>
    </assembly>
    <members>
        <member name="T:Retlang.Core.IExecutionContext">
            <summary>
            Context of execution.
            </summary>
        </member>
        <member name="M:Retlang.Core.IExecutionContext.Enqueue(System.Action)">
            <summary>
            Enqueue a single action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:Retlang.Channels.IQueueChannel`1">
            <summary>
            Creates a queue that will deliver a message to a single consumer. Load balancing can be achieved by creating 
            multiple subscribers to the queue.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retlang.Channels.IQueueChannel`1.Subscribe(Retlang.Core.IExecutionContext,System.Action{`0})">
            <summary>
            Subscribe to the context.
            </summary>
            <param name="executionContext"></param>
            <param name="onMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Channels.IQueueChannel`1.Publish(`0)">
            <summary>
            Pushes a message into the queue. Message will be processed by first available consumer.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Retlang.Fibers.StubScheduledAction">
            <summary>
             For use only in testing.  Allows for controlled execution of scheduled actions on the StubFiber.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.StubScheduledAction.#ctor(System.Action,System.Int64,System.Int64,System.Collections.Generic.List{Retlang.Fibers.StubScheduledAction})">
            <summary>
             Use for recurring scheduled actions.
            </summary>
            <param name="action"></param>
            <param name="firstIntervalInMs"></param>
            <param name="intervalInMs"></param>
            <param name="registry"></param>
        </member>
        <member name="M:Retlang.Fibers.StubScheduledAction.#ctor(System.Action,System.Int64,System.Collections.Generic.List{Retlang.Fibers.StubScheduledAction})">
            <summary>
             Use for scheduled actions that only occur once.
            </summary>
            <param name="action"></param>
            <param name="timeTilEnqueueInMs"></param>
            <param name="registry"></param>
        </member>
        <member name="M:Retlang.Fibers.StubScheduledAction.Execute">
            <summary>
             Executes the scheduled action.  If the action is not recurring it will be removed from the registry.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.StubScheduledAction.Dispose">
            <summary>
            Cancels scheduled action.  Removes scheduled action from registry.
            </summary>
        </member>
        <member name="P:Retlang.Fibers.StubScheduledAction.FirstIntervalInMs">
            <summary>
             First interval in milliseconds.
            </summary>
        </member>
        <member name="P:Retlang.Fibers.StubScheduledAction.IntervalInMs">
            <summary>
             Recurring interval in milliseconds.
            </summary>
        </member>
        <member name="T:Retlang.Core.Subscriptions">
            <summary>
            Registry for subscriptions. Provides thread safe methods for list of subscriptions.
            </summary>
        </member>
        <member name="M:Retlang.Core.Subscriptions.Add(System.IDisposable)">
            <summary>
            Add Disposable
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:Retlang.Core.Subscriptions.Remove(System.IDisposable)">
            <summary>
            Remove Disposable.
            </summary>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Core.Subscriptions.Dispose">
            <summary>
            Disposes all disposables registered in list.
            </summary>
        </member>
        <member name="P:Retlang.Core.Subscriptions.Count">
            <summary>
            Number of registered disposables.
            </summary>
        </member>
        <member name="T:Retlang.Fibers.IFiber">
            <summary>
            Enqueues pending actions for the context of execution (thread, pool of threads, message pump, etc.)
            </summary>
        </member>
        <member name="T:Retlang.Core.ISubscriptionRegistry">
            <summary>
             Allows for the registration and deregistration of subscriptions
            </summary>
        </member>
        <member name="M:Retlang.Core.ISubscriptionRegistry.RegisterSubscription(System.IDisposable)">
            <summary>
             Register subscription to be unsubcribed from when the fiber is disposed.
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:Retlang.Core.ISubscriptionRegistry.DeregisterSubscription(System.IDisposable)">
            <summary>
             Deregister a subscription.
            </summary>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="T:Retlang.Core.IScheduler">
            <summary>
            Methods for scheduling actions that will be executed in the future.
            </summary>
        </member>
        <member name="M:Retlang.Core.IScheduler.Schedule(System.Action,System.Int64)">
            <summary>
            Schedules an action to be executed once.
            </summary>
            <param name="action"></param>
            <param name="firstInMs"></param>
            <returns>a handle to cancel the timer.</returns>
        </member>
        <member name="M:Retlang.Core.IScheduler.ScheduleOnInterval(System.Action,System.Int64,System.Int64)">
            <summary>
            Schedule an action to be executed on a recurring interval.
            </summary>
            <param name="action"></param>
            <param name="firstInMs"></param>
            <param name="regularInMs"></param>
            <returns>a handle to cancel the timer.</returns>
        </member>
        <member name="M:Retlang.Fibers.IFiber.Start">
            <summary>
            Start consuming actions.
            </summary>
        </member>
        <member name="T:Retlang.Channels.BatchSubscriber`1">
            <summary>
            Batches actions for the consuming thread.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Retlang.Channels.BaseSubscription`1">
            <summary>
            Base implementation for subscription
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Retlang.Channels.ISubscribable`1">
            <summary>
            Callback method and parameters for a channel subscription
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Retlang.Channels.IProducerThreadSubscriber`1">
            <summary>
            Action subscriber that receives actions on producer thread.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retlang.Channels.IProducerThreadSubscriber`1.ReceiveOnProducerThread(`0)">
            <summary>
            Method called from producer threads
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:Retlang.Channels.IProducerThreadSubscriber`1.Subscriptions">
            <summary>
             Allows for the registration and deregistration of subscriptions
            </summary>
        </member>
        <member name="P:Retlang.Channels.ISubscribable`1.FilterOnProducerThread">
            <summary>
            Filter called from producer threads. Should be thread safe as it may be called from
            multiple threads.
            </summary>
        </member>
        <member name="M:Retlang.Channels.BaseSubscription`1.ReceiveOnProducerThread(`0)">
            <summary>
            <see cref="M:Retlang.Channels.IProducerThreadSubscriber`1.ReceiveOnProducerThread(`0)"/>
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Retlang.Channels.BaseSubscription`1.OnMessageOnProducerThread(`0)">
            <summary>
            Called after message has been filtered.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:Retlang.Channels.BaseSubscription`1.FilterOnProducerThread">
            <summary>
            <see cref="P:Retlang.Channels.ISubscribable`1.FilterOnProducerThread"/>
            </summary>
        </member>
        <member name="P:Retlang.Channels.BaseSubscription`1.Subscriptions">
            <summary>
             Allows for the registration and deregistration of subscriptions
            </summary>
        </member>
        <member name="M:Retlang.Channels.BatchSubscriber`1.#ctor(Retlang.Fibers.IFiber,System.Action{System.Collections.Generic.IList{`0}},System.Int32)">
            <summary>
            Construct new instance.
            </summary>
            <param name="fiber"></param>
            <param name="receive"></param>
            <param name="interval"></param>
        </member>
        <member name="M:Retlang.Channels.BatchSubscriber`1.OnMessageOnProducerThread(`0)">
            <summary>
            Receives message and batches as needed.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:Retlang.Channels.BatchSubscriber`1.Subscriptions">
            <summary>
             Allows for the registration and deregistration of subscriptions
            </summary>
        </member>
        <member name="T:Retlang.Fibers.FormFiber">
            <summary>
             Allows interaction with Windows Forms.  Transparently moves actions onto the Form's thread.
            </summary>
        </member>
        <member name="T:Retlang.Fibers.GuiFiber">
            <summary>
             Allows interaction with Windows Forms.  Transparently moves actions onto the Form's thread.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.GuiFiber.#ctor(Retlang.Core.IExecutionContext,Retlang.Core.IExecutor)">
            <summary>
            Creates an instance.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.GuiFiber.Enqueue(System.Action)">
            <summary>
            Enqueue a single action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Retlang.Fibers.GuiFiber.RegisterSubscription(System.IDisposable)">
            <summary>
             Register subscription to be unsubcribed from when the fiber is disposed.
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:Retlang.Fibers.GuiFiber.DeregisterSubscription(System.IDisposable)">
            <summary>
             Deregister a subscription.
            </summary>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Fibers.GuiFiber.Schedule(System.Action,System.Int64)">
            <summary>
            <see cref="M:Retlang.Core.IScheduler.Schedule(System.Action,System.Int64)"/>
            </summary>
        </member>
        <member name="M:Retlang.Fibers.GuiFiber.ScheduleOnInterval(System.Action,System.Int64,System.Int64)">
            <summary>
            <see cref="M:Retlang.Core.IScheduler.ScheduleOnInterval(System.Action,System.Int64,System.Int64)"/>
            </summary>
        </member>
        <member name="M:Retlang.Fibers.GuiFiber.Start">
            <summary>
            <see cref="M:Retlang.Fibers.IFiber.Start"/>
            </summary>
        </member>
        <member name="M:Retlang.Fibers.GuiFiber.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Retlang.Fibers.GuiFiber.Stop">
            <summary>
            Stops the fiber.
            </summary>
        </member>
        <member name="P:Retlang.Fibers.GuiFiber.NumSubscriptions">
            <summary>
             Number of subscriptions.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.FormFiber.#ctor(System.ComponentModel.ISynchronizeInvoke,Retlang.Core.IExecutor)">
            <summary>
            Creates an instance.
            </summary>
        </member>
        <member name="T:Retlang.Core.QueueFullException">
            <summary>
            Thrown when a queue is full.
            </summary>
        </member>
        <member name="M:Retlang.Core.QueueFullException.#ctor(System.Int32)">
            <summary>
            Construct the execution with the depth of the queue.
            </summary>
            <param name="depth"></param>
        </member>
        <member name="M:Retlang.Core.QueueFullException.#ctor(System.String)">
            <summary>
            Construct with a custom message.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:Retlang.Core.QueueFullException.Depth">
            <summary>
            Depth of queue.
            </summary>
        </member>
        <member name="T:Retlang.Channels.SnapshotChannel`1">
            <summary>
             A SnapshotChannel is a channel that allows for the transmission of an initial snapshot followed by incremental updates.
             The class is thread safe.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Retlang.Channels.ISnapshotChannel`1">
            <summary>
             An ISnapshotChannel is a channel that allows for the transmission of an initial snapshot followed by incremental updates.
             The class is thread safe.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retlang.Channels.ISnapshotChannel`1.PrimedSubscribe(Retlang.Fibers.IFiber,System.Action{`0})">
            <summary>
             Subscribes for an initial snapshot and then incremental update.
            </summary>
            <param name="fiber">the target executor to receive the message</param>
            <param name="receive"></param>
        </member>
        <member name="M:Retlang.Channels.ISnapshotChannel`1.Publish(`0)">
            <summary>
             Publishes the incremental update.
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:Retlang.Channels.ISnapshotChannel`1.ReplyToPrimingRequest(Retlang.Fibers.IFiber,System.Func{`0})">
            <summary>
             Ressponds to the request for an initial snapshot.
            </summary>
            <param name="fiber">the target executor to receive the message</param>
            <param name="reply">returns the snapshot update</param>
        </member>
        <member name="M:Retlang.Channels.SnapshotChannel`1.#ctor(System.Int32)">
            <summary>
            </summary>
            <param name="timeoutInMs">For initial snapshot</param>
        </member>
        <member name="M:Retlang.Channels.SnapshotChannel`1.PrimedSubscribe(Retlang.Fibers.IFiber,System.Action{`0})">
            <summary>
             Subscribes for an initial snapshot and then incremental update.
            </summary>
            <param name="fiber">the target executor to receive the message</param>
            <param name="receive"></param>
        </member>
        <member name="M:Retlang.Channels.SnapshotChannel`1.Publish(`0)">
            <summary>
             Publishes the incremental update.
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:Retlang.Channels.SnapshotChannel`1.ReplyToPrimingRequest(Retlang.Fibers.IFiber,System.Func{`0})">
            <summary>
             Ressponds to the request for an initial snapshot.
            </summary>
            <param name="fiber">the target executor to receive the message</param>
            <param name="reply">returns the snapshot update</param>
        </member>
        <member name="T:Retlang.Fibers.StubFiber">
            <summary>
            StubFiber does not use a backing thread or a thread pool for execution. Actions are added to pending
            lists for execution. These actions can be executed synchronously by the calling thread. This class
            is not thread safe and should not be used in production code. 
            
            The class is typically used for testing asynchronous code to make it completely synchronous and
            deterministic.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.StubFiber.Start">
            <summary>
            No Op
            </summary>
        </member>
        <member name="M:Retlang.Fibers.StubFiber.Dispose">
            <summary>
            Unsubscribes from all subscriptions.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.StubFiber.Enqueue(System.Action)">
            <summary>
            Enqueue a single action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Retlang.Fibers.StubFiber.RegisterSubscription(System.IDisposable)">
            <summary>
             Register subscription to be unsubcribed from when the fiber is disposed.
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:Retlang.Fibers.StubFiber.DeregisterSubscription(System.IDisposable)">
            <summary>
             Deregister a subscription.
            </summary>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Fibers.StubFiber.Schedule(System.Action,System.Int64)">
            <summary>
            Adds a scheduled action to the list. 
            </summary>
            <param name="action"></param>
            <param name="firstInMs"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Fibers.StubFiber.ScheduleOnInterval(System.Action,System.Int64,System.Int64)">
            <summary>
            Adds scheduled action to list.
            </summary>
            <param name="action"></param>
            <param name="firstInMs"></param>
            <param name="regularInMs"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Fibers.StubFiber.ExecuteAllPendingUntilEmpty">
            <summary>
            Execute all actions in the pending list.  If any of the executed actions enqueue more actions, execute those as well.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.StubFiber.ExecuteAllPending">
            <summary>
            Execute all actions in the pending list.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.StubFiber.ExecuteAllScheduled">
            <summary>
            Execute all actions in the scheduled list.
            </summary>
        </member>
        <member name="P:Retlang.Fibers.StubFiber.NumSubscriptions">
            <summary>
             Number of subscriptions.
            </summary>
        </member>
        <member name="P:Retlang.Fibers.StubFiber.Subscriptions">
            <summary>
            All subscriptions.
            </summary>
        </member>
        <member name="P:Retlang.Fibers.StubFiber.Pending">
            <summary>
            All pending actions.
            </summary>
        </member>
        <member name="P:Retlang.Fibers.StubFiber.Scheduled">
            <summary>
            All scheduled actions.
            </summary>
        </member>
        <member name="P:Retlang.Fibers.StubFiber.ExecutePendingImmediately">
            <summary>
            If true events will be executed immediately rather than added to the pending list.
            </summary>
        </member>
        <member name="T:Retlang.Fibers.PoolFiber">
            <summary>
            Fiber that uses a thread pool for execution.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.PoolFiber.#ctor(Retlang.Core.IThreadPool,Retlang.Core.IExecutor)">
            <summary>
            Construct new instance.
            </summary>
            <param name="pool"></param>
            <param name="executor"></param>
        </member>
        <member name="M:Retlang.Fibers.PoolFiber.#ctor(Retlang.Core.IExecutor)">
            <summary>
            Create a pool fiber with the default thread pool.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.PoolFiber.#ctor">
            <summary>
            Create a pool fiber with the default thread pool and default executor.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.PoolFiber.Enqueue(System.Action)">
            <summary>
            Enqueue a single action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Retlang.Fibers.PoolFiber.RegisterSubscription(System.IDisposable)">
            <summary>
             Register subscription to be unsubcribed from when the fiber is disposed.
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:Retlang.Fibers.PoolFiber.DeregisterSubscription(System.IDisposable)">
            <summary>
             Deregister a subscription.
            </summary>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Fibers.PoolFiber.Schedule(System.Action,System.Int64)">
            <summary>
            <see cref="M:Retlang.Core.IScheduler.Schedule(System.Action,System.Int64)"/>
            </summary>
            <param name="action"></param>
            <param name="firstInMs"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Fibers.PoolFiber.ScheduleOnInterval(System.Action,System.Int64,System.Int64)">
            <summary>
            <see cref="M:Retlang.Core.IScheduler.ScheduleOnInterval(System.Action,System.Int64,System.Int64)"/>
            </summary>
            <param name="action"></param>
            <param name="firstInMs"></param>
            <param name="regularInMs"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Fibers.PoolFiber.Start">
            <summary>
            Start consuming actions.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.PoolFiber.Stop">
            <summary>
            Stop consuming actions.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.PoolFiber.Dispose">
            <summary>
            Stops the fiber.
            </summary>
        </member>
        <member name="P:Retlang.Fibers.PoolFiber.NumSubscriptions">
            <summary>
             Number of subscriptions.
            </summary>
        </member>
        <member name="T:Retlang.Core.IExecutor">
            <summary>
            Executes pending action(s).
            </summary>
        </member>
        <member name="M:Retlang.Core.IExecutor.Execute(System.Collections.Generic.List{System.Action})">
            <summary>
            Executes all actions.
            </summary>
            <param name="toExecute"></param>
        </member>
        <member name="M:Retlang.Core.IExecutor.Execute(System.Action)">
            <summary>
             Executes a single action. 
            </summary>
            <param name="toExecute"></param>
        </member>
        <member name="T:Retlang.Core.Scheduler">
            <summary>
             Enqueues actions on to context after schedule elapses.  
            </summary>
        </member>
        <member name="T:Retlang.Core.ISchedulerRegistry">
            <summary>
            Enqueues actions and 
            </summary>
        </member>
        <member name="M:Retlang.Core.ISchedulerRegistry.Enqueue(System.Action)">
            <summary>
            Enqueue action to target fiber.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Retlang.Core.ISchedulerRegistry.Remove(System.IDisposable)">
            <summary>
            Remove timer
            </summary>
            <param name="timer"></param>
        </member>
        <member name="M:Retlang.Core.Scheduler.#ctor(Retlang.Core.IExecutionContext)">
            <summary>
             Constructs new instance.
            </summary>
        </member>
        <member name="M:Retlang.Core.Scheduler.Schedule(System.Action,System.Int64)">
            <summary>
             Enqueues action on to context after timer elapses.  
            </summary>
        </member>
        <member name="M:Retlang.Core.Scheduler.ScheduleOnInterval(System.Action,System.Int64,System.Int64)">
            <summary>
             Enqueues actions on to context after schedule elapses.  
            </summary>
        </member>
        <member name="M:Retlang.Core.Scheduler.Remove(System.IDisposable)">
            <summary>
             Removes a pending scheduled action.
            </summary>
            <param name="toRemove"></param>
        </member>
        <member name="M:Retlang.Core.Scheduler.Enqueue(System.Action)">
            <summary>
             Enqueues actions on to context immediately.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Retlang.Core.Scheduler.Dispose">
            <summary>
             Cancels all pending actions
            </summary>
        </member>
        <member name="T:Retlang.Core.BoundedQueue">
            <summary>
            Queue with bounded capacity.  Will throw exception if capacity does not recede prior to wait time.
            </summary>
        </member>
        <member name="T:Retlang.Core.IQueue">
            <summary>
            Holds on to actions until the execution context can process them.
            </summary>
        </member>
        <member name="M:Retlang.Core.IQueue.Enqueue(System.Action)">
            <summary>
             Enqueues action for execution context to process.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Retlang.Core.IQueue.Run">
            <summary>
            Start consuming actions.
            </summary>
        </member>
        <member name="M:Retlang.Core.IQueue.Stop">
            <summary>
            Stop consuming actions.
            </summary>
        </member>
        <member name="M:Retlang.Core.BoundedQueue.#ctor(Retlang.Core.IExecutor)">
            <summary>
             Creates a bounded queue with a custom executor.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:Retlang.Core.BoundedQueue.#ctor">
            <summary>
             Creates a bounded queue with the default executor.
            </summary>
        </member>
        <member name="M:Retlang.Core.BoundedQueue.Enqueue(System.Action)">
            <summary>
            Enqueue action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Retlang.Core.BoundedQueue.Run">
            <summary>
            Execute actions until stopped.
            </summary>
        </member>
        <member name="M:Retlang.Core.BoundedQueue.Stop">
            <summary>
            Stop consuming actions.
            </summary>
        </member>
        <member name="M:Retlang.Core.BoundedQueue.ExecuteNextBatch">
            <summary>
            Remove all actions and execute.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retlang.Core.BoundedQueue.MaxDepth">
            <summary>
            Max number of actions to be queued.
            </summary>
        </member>
        <member name="P:Retlang.Core.BoundedQueue.MaxEnqueueWaitTime">
            <summary>
            Max time to wait for space in the queue.
            </summary>
        </member>
        <member name="T:Retlang.Channels.KeyedBatchSubscriber`2">
            <summary>
            Channel subscription that drops duplicates based upon a key.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retlang.Channels.KeyedBatchSubscriber`2.#ctor(System.Converter{`1,`0},System.Action{System.Collections.Generic.IDictionary{`0,`1}},Retlang.Fibers.IFiber,System.Int32)">
            <summary>
            Construct new instance.
            </summary>
            <param name="keyResolver"></param>
            <param name="target"></param>
            <param name="fiber"></param>
            <param name="flushIntervalInMs"></param>
        </member>
        <member name="M:Retlang.Channels.KeyedBatchSubscriber`2.OnMessageOnProducerThread(`1)">
            <summary>
            received on delivery thread
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Retlang.Channels.KeyedBatchSubscriber`2.Flush">
            <summary>
            Flushed from fiber
            </summary>
        </member>
        <member name="P:Retlang.Channels.KeyedBatchSubscriber`2.Subscriptions">
            <summary>
             Allows for the registration and deregistration of subscriptions
            </summary>
        </member>
        <member name="T:Retlang.Channels.IRequest`2">
            <summary>
            A request object that can be used to send 1 or many responses to the initial request.
            </summary>
            <typeparam name="R"></typeparam>
            <typeparam name="M"></typeparam>
        </member>
        <member name="M:Retlang.Channels.IRequest`2.SendReply(`1)">
            <summary>
            Send one or more responses.
            </summary>
            <param name="replyMsg"></param>
            <returns></returns>
        </member>
        <member name="P:Retlang.Channels.IRequest`2.Request">
            <summary>
            Request Message
            </summary>
        </member>
        <member name="T:Retlang.Fibers.DispatcherFiber">
            <summary>
            Adapts Dispatcher to a Fiber. Transparently moves actions onto the Dispatcher thread.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.DispatcherFiber.#ctor(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority,Retlang.Core.IExecutor)">
            <summary>
            Constructs a Fiber that executes on dispatcher thread.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="priority">The priority.</param>
            <param name="executor">The executor.</param>
        </member>
        <member name="M:Retlang.Fibers.DispatcherFiber.#ctor(System.Windows.Threading.Dispatcher,Retlang.Core.IExecutor)">
            <summary>
            Constructs a Fiber that executes on dispatcher thread.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="executor">The priority.</param>
        </member>
        <member name="M:Retlang.Fibers.DispatcherFiber.#ctor(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Constructs a Fiber that executes on dispatcher thread.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Retlang.Fibers.DispatcherFiber.#ctor(System.Windows.Threading.Dispatcher)">
            <summary>
            Constructs a Fiber that executes on dispatcher thread.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Retlang.Fibers.DispatcherFiber.#ctor(System.Windows.Threading.DispatcherPriority)">
            <summary>
            Constructs a Fiber that executes on dispatcher thread of the
            current dispatcher.
            </summary>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Retlang.Fibers.DispatcherFiber.#ctor">
            <summary>
            Constructs a Fiber that executes on dispatcher thread of the
            current dispatcher.
            </summary>
        </member>
        <member name="T:Retlang.Channels.LastSubscriber`1">
            <summary>
            Subscribes to last action received on the channel. 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retlang.Channels.LastSubscriber`1.#ctor(System.Action{`0},Retlang.Fibers.IFiber,System.Int32)">
            <summary>
            New instance.
            </summary>
            <param name="target"></param>
            <param name="fiber"></param>
            <param name="flushIntervalInMs"></param>
        </member>
        <member name="M:Retlang.Channels.LastSubscriber`1.OnMessageOnProducerThread(`0)">
            <summary>
            Receives message from producer thread.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Retlang.Channels.LastSubscriber`1.Flush">
            <summary>
            Flushes on IFiber thread.
            </summary>
        </member>
        <member name="P:Retlang.Channels.LastSubscriber`1.Subscriptions">
            <summary>
             Allows for the registration and deregistration of subscriptions
            </summary>
        </member>
        <member name="T:Retlang.Channels.IPublisher`1">
            <summary>
            Channel publishing interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retlang.Channels.IPublisher`1.Publish(`0)">
            <summary>
            Publish a message to all subscribers. Returns true if any subscribers are registered.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:Retlang.Channels.IChannel`1">
            <summary>
            A channel provides a conduit for messages. It provides methods for publishing and subscribing to messages. 
            The class is thread safe.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Retlang.Channels.ISubscriber`1">
            <summary>
            Channel subscription methods.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retlang.Channels.ISubscriber`1.Subscribe(Retlang.Fibers.IFiber,System.Action{`0})">
            <summary>
             Subscribe to messages on this channel. The provided action will be invoked via a Action on the provided executor.
            </summary>
            <param name="fiber">the target executor to receive the message</param>
            <param name="receive"></param>
            <returns>Unsubscriber object</returns>
        </member>
        <member name="M:Retlang.Channels.ISubscriber`1.SubscribeToBatch(Retlang.Fibers.IFiber,System.Action{System.Collections.Generic.IList{`0}},System.Int32)">
            <summary>
            Subscribes to actions on the channel in batch form. The events will be batched if the consumer is unable to process the events 
            faster than the arrival rate.
            </summary>
            <param name="fiber">The target context to execute the action</param>
            <param name="receive"></param>
            <param name="intervalInMs">Time in Ms to batch actions. If 0 events will be delivered as fast as consumer can process</param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Channels.ISubscriber`1.SubscribeToKeyedBatch``1(Retlang.Fibers.IFiber,System.Converter{`0,``0},System.Action{System.Collections.Generic.IDictionary{``0,`0}},System.Int32)">
            <summary>
             Batches actions based upon keyed values allowing for duplicates to be dropped. 
            </summary>
            <param name="fiber"></param>
            <param name="keyResolver"></param>
            <param name="receive"></param>
            <param name="intervalInMs"></param>
            <typeparam name="K"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Retlang.Channels.ISubscriber`1.SubscribeToLast(Retlang.Fibers.IFiber,System.Action{`0},System.Int32)">
            <summary>
            Subscription that delivers the latest message to the consuming thread.  If a newer message arrives before the consuming thread
            has a chance to process the message, the pending message is replaced by the newer message. The old message is discarded.
            </summary>
            <param name="fiber"></param>
            <param name="receive"></param>
            <param name="intervalInMs"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Channels.ISubscriber`1.ClearSubscribers">
            <summary>
            Removes all subscribers.
            </summary>
        </member>
        <member name="M:Retlang.Channels.IChannel`1.SubscribeOnProducerThreads(Retlang.Channels.IProducerThreadSubscriber{`0})">
            <summary>
            Subscribes to actions on producer threads. Subscriber could be called from multiple threads.
            </summary>
            <param name="subscriber"></param>
            <returns></returns>
        </member>
        <member name="T:Retlang.Channels.IReply`1">
            <summary>
            Used to receive one or more replies.
            </summary>
            <typeparam name="M"></typeparam>
        </member>
        <member name="M:Retlang.Channels.IReply`1.Receive(System.Int32,`0@)">
            <summary>
            Receive a single response. Can be called repeatedly for multiple replies.
            </summary>
            <param name="timeout"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Channels.ChannelRequest`2.Dispose">
            <summary>
            Stop receiving replies.
            </summary>
        </member>
        <member name="T:Retlang.Fibers.ThreadFiber">
            <summary>
            Fiber implementation backed by a dedicated thread.
            <see cref="T:Retlang.Fibers.IFiber"/>
            </summary>
        </member>
        <member name="M:Retlang.Fibers.ThreadFiber.#ctor">
            <summary>
            Create a thread fiber with the default executor.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.ThreadFiber.#ctor(Retlang.Core.IQueue)">
            <summary>
            Creates a thread fiber with a specified executor.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:Retlang.Fibers.ThreadFiber.#ctor(System.String)">
            <summary>
            Creates a thread fiber with a specified name.
            </summary>
            /// <param name="threadName"></param>
        </member>
        <member name="M:Retlang.Fibers.ThreadFiber.#ctor(Retlang.Core.IQueue,System.String,System.Boolean,System.Threading.ThreadPriority)">
            <summary>
            Creates a thread fiber.
            </summary>
            <param name="executor"></param>
            <param name="threadName"></param>
            <param name="isBackground"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Retlang.Fibers.ThreadFiber.Enqueue(System.Action)">
            <summary>
            Enqueue a single action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Retlang.Fibers.ThreadFiber.RegisterSubscription(System.IDisposable)">
            <summary>
             Register subscription to be unsubcribed from when the fiber is disposed.
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:Retlang.Fibers.ThreadFiber.DeregisterSubscription(System.IDisposable)">
            <summary>
             Deregister a subscription.
            </summary>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Fibers.ThreadFiber.Schedule(System.Action,System.Int64)">
            <summary>
            <see cref="M:Retlang.Core.IScheduler.Schedule(System.Action,System.Int64)"/>
            </summary>
            <param name="action"></param>
            <param name="firstInMs"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Fibers.ThreadFiber.ScheduleOnInterval(System.Action,System.Int64,System.Int64)">
            <summary>
            <see cref="M:Retlang.Core.IScheduler.ScheduleOnInterval(System.Action,System.Int64,System.Int64)"/>
            </summary>
            <param name="action"></param>
            <param name="firstInMs"></param>
            <param name="regularInMs"></param>
        </member>
        <member name="M:Retlang.Fibers.ThreadFiber.Start">
            <summary>
            <see cref="M:Retlang.Fibers.IFiber.Start"/>
            </summary>
        </member>
        <member name="M:Retlang.Fibers.ThreadFiber.Join">
            <summary>
             Calls join on the thread.
            </summary>
        </member>
        <member name="M:Retlang.Fibers.ThreadFiber.Dispose">
            <summary>
            Stops the thread.
            </summary>
        </member>
        <member name="P:Retlang.Fibers.ThreadFiber.Thread">
            <summary>
            <see cref="T:Retlang.Fibers.IFiber"/>
            </summary>
        </member>
        <member name="P:Retlang.Fibers.ThreadFiber.NumSubscriptions">
            <summary>
             Number of subscriptions.
            </summary>
        </member>
        <member name="T:Retlang.Fibers.ExecutionState">
            <summary>
             Fiber execution state management
            </summary>
        </member>
        <member name="F:Retlang.Fibers.ExecutionState.Created">
            <summary>
             Created but not running
            </summary>
        </member>
        <member name="F:Retlang.Fibers.ExecutionState.Running">
            <summary>
             After start
            </summary>
        </member>
        <member name="F:Retlang.Fibers.ExecutionState.Stopped">
            <summary>
             After stopped
            </summary>
        </member>
        <member name="T:Retlang.Core.BusyWaitQueue">
            <summary>
            Busy waits on lock to execute.  Can improve performance in certain situations.
            </summary>
        </member>
        <member name="M:Retlang.Core.BusyWaitQueue.#ctor(Retlang.Core.IExecutor,System.Int32,System.Int32)">
            <summary>
             BusyWaitQueue with custom executor
            </summary>
            <param name="executor"></param>
            <param name="spinsBeforeTimeCheck"></param>
            <param name="msBeforeRealWait"></param>
        </member>
        <member name="M:Retlang.Core.BusyWaitQueue.#ctor(System.Int32,System.Int32)">
            <summary>
             BusyWaitQueue with default executor
            </summary>
        </member>
        <member name="M:Retlang.Core.BusyWaitQueue.Enqueue(System.Action)">
            <summary>
            Enqueue action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Retlang.Core.BusyWaitQueue.Run">
            <summary>
            Execute actions until stopped.
            </summary>
        </member>
        <member name="M:Retlang.Core.BusyWaitQueue.Stop">
            <summary>
            Stop consuming actions.
            </summary>
        </member>
        <member name="M:Retlang.Core.BusyWaitQueue.ExecuteNextBatch">
            <summary>
            Remove all actions and execute.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retlang.Core.DefaultQueue">
            <summary>
            Default implementation.
            </summary>
        </member>
        <member name="M:Retlang.Core.DefaultQueue.#ctor(Retlang.Core.IExecutor)">
            <summary>
             Default queue with custom executor
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:Retlang.Core.DefaultQueue.#ctor">
            <summary>
             Default queue with default executor
            </summary>
        </member>
        <member name="M:Retlang.Core.DefaultQueue.Enqueue(System.Action)">
            <summary>
            Enqueue action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Retlang.Core.DefaultQueue.Run">
            <summary>
            Execute actions until stopped.
            </summary>
        </member>
        <member name="M:Retlang.Core.DefaultQueue.Stop">
            <summary>
            Stop consuming actions.
            </summary>
        </member>
        <member name="M:Retlang.Core.DefaultQueue.ExecuteNextBatch">
            <summary>
            Remove all actions and execute.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retlang.Channels.RequestReplyChannel`2">
            <summary>
            Channel for synchronous and asynchronous requests.
            </summary>
            <typeparam name="R"></typeparam>
            <typeparam name="M"></typeparam>
        </member>
        <member name="T:Retlang.Channels.IRequestReplyChannel`2">
            <summary>
            Typed channel for request/reply
            </summary>
            <typeparam name="R"></typeparam>
            <typeparam name="M"></typeparam>
        </member>
        <member name="T:Retlang.Channels.IRequestPublisher`2">
            <summary>
            
            </summary>
            <typeparam name="R"></typeparam>
            <typeparam name="M"></typeparam>
        </member>
        <member name="M:Retlang.Channels.IRequestPublisher`2.SendRequest(`0)">
            <summary>
            Send request on the channel.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Retlang.Channels.IReplySubscriber`2">
            <summary>
            Methods for working with a replyChannel
            </summary>
            <typeparam name="R"></typeparam>
            <typeparam name="M"></typeparam>
        </member>
        <member name="M:Retlang.Channels.IReplySubscriber`2.Subscribe(Retlang.Fibers.IFiber,System.Action{Retlang.Channels.IRequest{`0,`1}})">
            <summary>
            Subscribe to a request on the channel.
            </summary>
            <param name="fiber"></param>
            <param name="onRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Channels.RequestReplyChannel`2.Subscribe(Retlang.Fibers.IFiber,System.Action{Retlang.Channels.IRequest{`0,`1}})">
            <summary>
            Subscribe to requests.
            </summary>
            <param name="fiber"></param>
            <param name="onRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Channels.RequestReplyChannel`2.SendRequest(`0)">
            <summary>
            Send request to any and all subscribers.
            </summary>
            <param name="p"></param>
            <returns>null if no subscribers registered for request.</returns>
        </member>
        <member name="T:Retlang.Core.IPendingEvent">
            <summary>
            A scheduled event.
            </summary>
        </member>
        <member name="M:Retlang.Core.IPendingEvent.Execute(System.Int64)">
            <summary>
            Execute this event and optionally schedule another execution.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retlang.Core.IPendingEvent.Expiration">
            <summary>
            Time of expiration for this event
            </summary>
        </member>
        <member name="T:Retlang.Core.DefaultThreadPool">
            <summary>
            Default implementation that uses the .NET thread pool.
            </summary>
        </member>
        <member name="T:Retlang.Core.IThreadPool">
            <summary>
            A thread pool for executing asynchronous actions.
            </summary>
        </member>
        <member name="M:Retlang.Core.IThreadPool.Queue(System.Threading.WaitCallback)">
            <summary>
            Enqueue action for execution.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Retlang.Core.DefaultThreadPool.Queue(System.Threading.WaitCallback)">
            <summary>
            Enqueues action.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:Retlang.Channels.Filter`1">
            <summary>
            Message filter delegate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:Retlang.Channels.ChannelSubscription`1">
            <summary>
            Subscription for actions on a channel.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retlang.Channels.ChannelSubscription`1.#ctor(Retlang.Fibers.IFiber,System.Action{`0})">
            <summary>
            Construct the subscription
            </summary>
            <param name="fiber"></param>
            <param name="receiver"></param>
        </member>
        <member name="M:Retlang.Channels.ChannelSubscription`1.OnMessageOnProducerThread(`0)">
            <summary>
            Receives the action and queues the execution on the target fiber.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:Retlang.Channels.ChannelSubscription`1.Subscriptions">
            <summary>
             Allows for the registration and deregistration of subscriptions
            </summary>
        </member>
        <member name="T:Retlang.Core.DefaultExecutor">
            <summary>
            Default executor.
            </summary>
        </member>
        <member name="M:Retlang.Core.DefaultExecutor.Execute(System.Collections.Generic.List{System.Action})">
            <summary>
            Executes all actions.
            </summary>
            <param name="toExecute"></param>
        </member>
        <member name="M:Retlang.Core.DefaultExecutor.Execute(System.Action)">
            <summary>
             Executes a single action. 
            </summary>
            <param name="toExecute"></param>
        </member>
        <member name="P:Retlang.Core.DefaultExecutor.IsEnabled">
            <summary>
            When disabled, actions will be ignored by executor. The executor is typically disabled at shutdown
            to prevent any pending actions from being executed. 
            </summary>
        </member>
        <member name="T:Retlang.Channels.QueueChannel`1">
            <summary>
            Default QueueChannel implementation. Once and only once delivery to first available consumer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retlang.Channels.QueueChannel`1.Subscribe(Retlang.Core.IExecutionContext,System.Action{`0})">
            <summary>
            Subscribe to executor messages. 
            </summary>
            <param name="executionContext"></param>
            <param name="onMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Channels.QueueChannel`1.Publish(`0)">
            <summary>
            Publish message onto queue. Notify consumers of message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Retlang.Channels.Channel`1">
            <summary>
             Default Channel Implementation. Methods are thread safe.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retlang.Channels.Channel`1.Subscribe(Retlang.Fibers.IFiber,System.Action{`0})">
            <summary>
            <see cref="M:Retlang.Channels.ISubscriber`1.Subscribe(Retlang.Fibers.IFiber,System.Action{`0})"/>
            </summary>
            <param name="fiber"></param>
            <param name="receive"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Channels.Channel`1.SubscribeToBatch(Retlang.Fibers.IFiber,System.Action{System.Collections.Generic.IList{`0}},System.Int32)">
            <summary>
            <see cref="M:Retlang.Channels.ISubscriber`1.SubscribeToBatch(Retlang.Fibers.IFiber,System.Action{System.Collections.Generic.IList{`0}},System.Int32)"/>
            </summary>
            <param name="fiber"></param>
            <param name="receive"></param>
            <param name="intervalInMs"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Channels.Channel`1.SubscribeToKeyedBatch``1(Retlang.Fibers.IFiber,System.Converter{`0,``0},System.Action{System.Collections.Generic.IDictionary{``0,`0}},System.Int32)">
            <summary>
            <see cref="M:Retlang.Channels.ISubscriber`1.SubscribeToKeyedBatch``1(Retlang.Fibers.IFiber,System.Converter{`0,``0},System.Action{System.Collections.Generic.IDictionary{``0,`0}},System.Int32)"/>
            </summary>
            <typeparam name="K"></typeparam>
            <param name="fiber"></param>
            <param name="keyResolver"></param>
            <param name="receive"></param>
            <param name="intervalInMs"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Channels.Channel`1.SubscribeToLast(Retlang.Fibers.IFiber,System.Action{`0},System.Int32)">
            <summary>
            Subscription that delivers the latest message to the consuming thread.  If a newer message arrives before the consuming thread
            has a chance to process the message, the pending message is replaced by the newer message. The old message is discarded.
            </summary>
            <param name="fiber"></param>
            <param name="receive"></param>
            <param name="intervalInMs"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Channels.Channel`1.SubscribeOnProducerThreads(Retlang.Channels.IProducerThreadSubscriber{`0})">
            <summary>
            Subscribes to actions on producer threads. Subscriber could be called from multiple threads.
            </summary>
            <param name="subscriber"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Channels.Channel`1.SubscribeOnProducerThreads(System.Action{`0},Retlang.Core.ISubscriptionRegistry)">
            <summary>
            Subscribes an action to be executed for every action posted to the channel. Action should be thread safe. 
            Action may be invoked on multiple threads.
            </summary>
            <param name="subscriber"></param>
            <param name="subscriptions"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Channels.Channel`1.Publish(`0)">
            <summary>
            <see cref="M:Retlang.Channels.IPublisher`1.Publish(`0)"/>
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Retlang.Channels.Channel`1.ClearSubscribers">
            <summary>
            Remove all subscribers.
            </summary>
        </member>
        <member name="P:Retlang.Channels.Channel`1.NumSubscribers">
            <summary>
             Number of subscribers
            </summary>
        </member>
    </members>
</doc>
